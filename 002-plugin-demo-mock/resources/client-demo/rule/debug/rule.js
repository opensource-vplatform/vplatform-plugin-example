var NumToChineseRule = function(num1, num2, callback){
    var cb = callback;
    vds.config({
        debug:true
    });
    vds.import("vds.mock.*","vds.rpc.*","vds.ds.*");
    vds.ready(function(){
        //vds.rpc.get("../manifest.json").then(function(metadata){
            
            let metadata = {
                "groupId":"com.yindangu.vplatform.client.rule",
                "code":"NumToChineseRule",
                "plugins":[{
                    "type":"rule",
                    "scope":"client",
                    "code":"NumToChineseRule",
                    "catalog":"other",
                    "name":"数字转大写汉字(前端规则)",
                    "desc":"数字转大写汉字(前端规则)",
                    "transactionType":"none",
                    "entry":"com.yindangu.rule.demo.common.NumToChineseRule",
                    "defineUrl":"./dist/NumToChineseRule.js",
                    "debugUrl":"./debug/rule.js",
                    "inputs":[{
                        "code":"price",
                        "name":"单价",
                        "type":"number",
                        "desc":"转换前的单价数值",
                        "default":null,
                        "editor":{
                            "type":"expression"
                        }
                    },{
                        "code":"sum",
                        "name":"总价",
                        "type":"number",
                        "desc":"转换的总价数值",
                        "default":null,
                        "editor":{
                            "type":"expression"
                        }
                    },{
                        "code":"entity",
                        "name":"实体",
                        "type":"entity",
                        "desc":"转换的实体数值",
                        "default":null,
                        "editor":{
                            "type":"entity"
                        },
                        "fields":[{
                            "code":"id",
                            "name":"编码",
                            "type":"char",
                            "desc":"编码数据"
                        },{
                            "code":"sum",
                            "name":"总价",
                            "type":"integer",
                            "desc":"总价数据"
                        },{
                            "code":"sum_cn",
                            "name":"总价（汉字）",
                            "type":"char",
                            "desc":"总价数据"
                        }]
                    },{
                        "code":"field",
                        "name":"字段编码",
                        "type":"field",
                        "desc":"需要转换成大写金额的字段编码",
                        "default":null,
                        "editor":{
                            "type":"expression"
                        }
                    },{
                        "code":"outField",
                        "name":"字段编码",
                        "type":"field",
                        "desc":"转换成大写金额保存的字段编码",
                        "default":null,
                        "editor":{
                            "type":"expression"
                        }
                    }],
                    "outputs":[{
                        "code":"price_cn",
                        "type":"char",
                        "name":"单价",
                        "desc":"转换后的单价数值"
                    },{
                        "code":"sum_cn",
                        "type":"char",
                        "name":"总价",
                        "desc":"转换后的总价数值"
                    },{
                        "code":"entity",
                        "name":"实体",
                        "type":"entity",
                        "desc":"转换的实体数值",
                        "default":null,
                        "editor":{
                            "type":"entity"
                        },
                        "fields":[{
                            "code":"id",
                            "name":"编码",
                            "type":"char",
                            "desc":"编码数据"
                        },{
                            "code":"sum",
                            "name":"总价",
                            "type":"integer",
                            "desc":"总价数据"
                        },{
                            "code":"sum_cn",
                            "name":"总价（汉字）",
                            "type":"char",
                            "desc":"总价数据"
                        }]
                    }]
                }]
            };
            vds.mock.init(metadata).then(function(mock){
                let datasource = vds.ds.mock([{
                    "id":1,
                    "sum":5932,
                    "sum_cn":""
                },{
                    "id":2,
                    "sum":13984,
                    "sum_cn":""
                },{
                    "id":3,
                    "sum":7343,
                    "sum_cn":""
                }]);
                vds.ds.register("entity",datasource);
                var output = vds.ds.mock([{
                    "id":1,
                    "sum":5932,
                    "sum_cn":""
                },{
                    "id":2,
                    "sum":13984,
                    "sum_cn":""
                },{
                    "id":3,
                    "sum":7343,
                    "sum_cn":""
                }]);
                vds.ds.register("entity",datasource);
                mock.get("NumToChineseRule").then(function(ruleMock){
                    ruleMock.mockInput("price",num1);
                    ruleMock.mockInput("sum",num2);
                    ruleMock.mockInput("entity","entity");
                    ruleMock.mockInput("field","sum");
                    ruleMock.mockInput("outField","sum_cn");
                    ruleMock.exec().then(function(){
                        var num1 = ruleMock.getOutput("price_cn");
                        var num2 = ruleMock.getOutput("sum_cn");
                        output.updateRecords(ruleMock.getOutput("entity"));
                        cb(num1, num2);
                    });
                }).catch(function(error){
                    console.error(error.message);
                    throw error;
                });
            }).catch(function(error){
                console.error(error.message);
                throw error;
            });
            
        /*}).catch(function(e){
            console.error("获取manifest.json失败!");
        });*/
    });
}